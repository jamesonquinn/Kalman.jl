Using lorenz96.py and changing the third argument to np.arrange, I looked into what time-step would be a good balance between too large (discretization error) and too small (nonlinear dynamics take too many time steps to appear). This python script uses odeint, which may not be the simple forward difference method I'm using in my own script, thus biasing me to pick a longer time step than I should. By eyeballing it, I think that 0.1 is a decent tradeoff.

If I really wanted to do this in a "realistic" way, I could run multiple smaller (deterministic) time steps for each filter step. This would essentially remove the discretization error issue, at the cost of processing. I don't think this would actually change the performance of my algorithms, though, as long as the "true" dynamics that I'm approximating has the exact same discretization issues as the models that I'm using. So, for now, 0.1 it is.

....

I did a quick-and-dirty jacobian for the pseudo-kalman version of l96. That could probably be improved with ad; I'll do that later.

...

Thinking about how many particles I need to do a good job. With neighborhood size of 4, the simple calculation would be (desired resolution in number of samples)^(neighborhood size). For instance, 8^4=4096. But the diffeq for time n+1 is actually merely linear in ego locus, while the other loci are multiplied by factors which should have average magnitude of roughly 5-10 (maybe 8???). Thus, the "effective number of dimensions" from time t-1 that matter at time t is roughly 3.2 or something (this is obviously very handwavy). 8^3.2≡780. I think I'll do 800 particles as "good enough"


2, first: truth goes crazy. Maybe forcing constant of 8 with processNoise SD of .1 is too much??
forcingF = 8.
#d is set by nParticles above
timeStep = 0.1
processNoiseVar = 0.01 #Is this good? Needs testing.
measurementNoiseVar = 0.1 #Again, ???
initialvar = 0.4 #leaves room for early progress



basenoise = .05
highnoise = .5
highgap = 5


....

Somewhat later:

lorenz_1 is the first one I think might work with fuzz propagation code in
but "rejuvenate" is not actually being called yet. Gonna look at how it's doing.
(9,200,40^2      ,div(200^2,5),20,1,20,1,1,1),

Using combinedevol.R, the first pair of graphs shows KF doing very well (too well),
block PF going off the rails at step 5 and not existing after that, bootstrap PF not
existing after step 2, and finkel not existing at all. Rerun,
changing from 160 nIters to 80:

lorenz_2:

...

lorenz_7: works but crashed on bug in resample.
histPerLocs = [10,20,5]
nIters = [80,0,160,20,40]
useForwards = [1.,.5,0.]
              (20,200,40^2      ,div(200^2,2),20,1,20,1,1,1),

lorenz_8: resample fixed?
"mysample overflow" 19994 39820 6.23e-322 20000 6.23e-322 0.0
still same funny bug
BoundsError: attempt to access 20×20000 Array{Float64,2} at index [6, 0]
getindex at array.jl:732 [inlined]
ap(::bkf.FrankenSet{Float64,bkf.BasicLorenzFilter}, ::Array{bkf.Resample,1}) at frankenfilter.jl:72
...

lorenz_9: resample finds and "fixes" error
stupid crash, "fixed"

lorenz_10:
PosDefException: matrix is not Hermitian; Cholesky factorization failed.
"fixed" fuzzfinkel.jl 77

lorenz_11:
Stopped prematurely because mean tp diagnostics were too low; 0.02 and the like.

lorenz_12:
Trying with useForward = 0. ...

Aha! was using index instead of value for lstem replacement. Fixed for:
lorenz_14:
...which seemed to work but was a quickie so

lorenz_15:oops

lorenz_16:
(also use_forwards = 1.)
...hmmm neighborhood is still size 1. Gotta fix...

lorenz_17: one chain worked; second chain broke when franken left attractor. Fixed and rerun:

lorenz_18: upping time step to 1. (100 substeps)
More hermitian fails, but in different places:ArgumentError: Normal: the condition σ > zero(σ) is not satisfied.
macro expansion at utils.jl:6 [inlined]
Type at normal.jl:30 [inlined]
Type at normal.jl:34 [inlined]
bkf.FuzzFinkelParticles(::bkf.FinkelToe{Float64,bkf.BasicLorenzFilter}, ::bkf.FinkelParams{bkf.SampleUniform,bkf.MhSampled}) at fuzzfinkel.jl:117
bkf.FuzzFinkelParticles(::bkf.FinkelToe{Float64,bkf.BasicLorenzFilter}) at fuzzfinkel.jl:44
predictUpdate(::bkf.FinkelToe{Float64,bkf.BasicLorenzFilter}, ::bkf.Observation{Float64}, ::Int64, ::Bool) at finkel.jl:811
predictUpdate(::bkf.FinkelToe{Float64,bkf.BasicLorenzFilter}, ::bkf.Observation{Float64}, ::Int64) at finkel.jl:809
(::getfield(Main, Symbol("##27#30")){Int64})(::IOStream) at lorenztest.jl:592
#open#294(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::getfield(Main, Symbol("##27#30")){Int64}, ::String, ::Vararg{String,N} where N) at iostream.jl:369
open(::Function, ::String, ::String) at iostream.jl:367
top-level scope at lorenztest.jl:588
Error in newCenters: state too far from 0 (slipped out of attractor?)
"XXXXX FuzzFinkelParticles error"
PosDefException(-1)
[NaN NaN NaN NaN; NaN NaN NaN NaN; NaN NaN NaN NaN; NaN NaN NaN NaN]
"XXXXXXXX forwardDistribution\n"

_19: fixed NaN weights, and caught one more non-negative Normal err. Better yet?...nope minor oops.

_20: More cholesky fuckery. more fixes.

_21 abort

_22: fuck you, Julia scoping.

_23:

...

_32: too much escaping attractor. Gonna slice time more finely

_33: gone from 110 to 210 slices to make up 1.0 time. Also tightened initialvar from 0.4 to 0.1.

_34: finished without error!

_35: include sampTypeLog... minor bug in that code, fixed.

_36:include sampTypeLog...
